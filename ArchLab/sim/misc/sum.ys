/* $begin code-yso */
/* $begin code-ysa */
/* 蒋衍 1600013239 */
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
        .align 4
ele1:   .long 0x00a
        .long ele2
ele2:   .long 0x0b0
        .long ele3
ele3:   .long 0xc00
        .long 0	

main:	pushl  %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%edx	
	pushl  %edx      	# Push ele
	call   sum_list		# call sum_list(ele)
	rrmovl %ebp,%esp
	popl   %ebp
	ret 

/* $begin sum_list 0 */
	# int sum_list(list_ptr ls) 
sum_list:
	pushl  %ebp
	rrmovl %esp,%ebp
	mrmovl 8(%ebp),%ecx 	# ecx = ele(ls)
	xorl   %eax,%eax	# sum = 0
test:
	andl   %ecx,%ecx	# Set condition codes while(ls!=0)
	je     end
loop:
	mrmovl (%ecx),%esi	# ls->val
	addl   %esi,%eax          # val += ls->val
	mrmovl 4(%ecx),%edi     # edi = ls->next
	rrmovl %edi,%ecx        # ecx = ls->next
	jmp    test             # Stop when 0
	
end:	rrmovl %ebp,%esp
	popl %ebp
	ret
/* $end sum-ys 0 */

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
/* $end code-ysa */
/* $end code-yso */
