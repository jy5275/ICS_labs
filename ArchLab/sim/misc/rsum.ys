/* 蒋衍 1600013239 */
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
        .align 4
ele1:   .long 0x00a
        .long ele2
ele2:   .long 0x0b0
        .long ele3
ele3:   .long 0xc00
        .long 0	

main:	pushl  %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%edx	
	pushl  %edx      	# push ele1 (pass argument)
	call   rsum_list	# call rsum_list(ele)
	rrmovl %ebp,%esp
	popl   %ebp
	ret 

/* $begin rsum_list (ls) */
	# int rsum_list(list_ptr ls)  # ls is saved in stack (above ret addr) 
rsum_list:
	pushl  %ebp
	rrmovl %esp,%ebp
	mrmovl 8(%ebp),%edx 	# edx = ele(ls)
	xorl   %eax,%eax	# sum = 0
	andl   %edx,%edx	# ret 0 if (edx==0)
	je     end
else:
        mrmovl (%edx),%ecx      # ecx = edx(ls)->val
        pushl  %ecx             # save ls->val(ecx) into stack
        mrmovl 4(%edx),%edx     # pass argument ls->next
        pushl  %edx
        call   rsum_list
        popl   %edx
        popl   %ecx
        addl   %eax,%ecx        # ecx = ls->val + ret_val
        rrmovl %ecx,%eax	
end:	
        rrmovl %ebp,%esp
	popl %ebp
	ret
/* $end rsum_list */

# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
