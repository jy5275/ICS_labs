                      | /* 蒋衍 1600013239 出品 */
                      | # Execution begins at address 0 
  0x000:              | 	.pos 0 
  0x000: 30f400010000 | init:	irmovl Stack, %esp  	# Set up stack pointer  
  0x006: 30f500010000 | 	irmovl Stack, %ebp  	# Set up base pointer   
  0x00c: 802c000000   | 	call main		# Execute main program
  0x011: 00           | 	halt			# Terminate program 
                      | 	
  0x014:              | 	.align 4
                      | # Source block
  0x014:              | src:
  0x014: 0a000000     |         .long 0x00a
  0x018: b0000000     |         .long 0x0b0
  0x01c: 000c0000     |         .long 0xc00
                      | # Destination block
  0x020:              | dest:
  0x020: 11010000     |         .long 0x111
  0x024: 22020000     |         .long 0x222
  0x028: 33030000     |         .long 0x333
                      | 
  0x02c: a05f         | main:	pushl  %ebp 
  0x02e: 2045         | 	rrmovl %esp,%ebp
  0x030: 30f214000000 | 	irmovl src,%edx	
  0x036: a02f         | 	pushl  %edx      	# push src (pass arg1)
  0x038: 30f220000000 | 	irmovl dest,%edx
  0x03e: a02f         | 	pushl  %edx             # push dest (pass arg2)
  0x040: 30f203000000 | 	irmovl $3,%edx
  0x046: a02f         | 	pushl  %edx             # push len (pass arg3)
  0x048: 8052000000   | 	call   copy	        # call copy(src,dext,len=3)
  0x04d: 2054         | 	rrmovl %ebp,%esp
  0x04f: b05f         | 	popl   %ebp
  0x051: 90           | 	ret 
                      | 	
                      | /* $begin copy (src,dest,len) */
                      | 	# int copy(int *src(ecx), int *dest(edx), int len(ebx))   # All saved in stack (above ret addr) 
  0x052:              | copy:
  0x052: a05f         | 	pushl  %ebp
  0x054: 2045         | 	rrmovl %esp,%ebp
  0x056: a07f         | 	pushl  %edi
  0x058: a06f         | 	pushl  %esi
  0x05a: a03f         | 	pushl  %ebx
  0x05c: 30f601000000 | 	irmovl $1,%esi
  0x062: 503508000000 | 	mrmovl 8(%ebp),%ebx 	# ebx = len
  0x068: 50250c000000 | 	mrmovl 12(%ebp),%edx    # edx = dest
  0x06e: 501510000000 | 	mrmovl 16(%ebp),%ecx    # ecx = src
  0x074: 6300         | 	xorl   %eax,%eax	# sum = 0
  0x076: 6233         | 	andl   %ebx,%ebx        # break if (ebx == 0)
  0x078: 709d000000   | 	jmp    test
  0x07d:              | loop:
  0x07d: 507100000000 |         mrmovl (%ecx),%edi      # edi(val) = *ecx(*src)
  0x083: 30f604000000 |         irmovl $4,%esi
  0x089: 6061         |         addl   %esi,%ecx        # ecx+4(src++)
  0x08b: 407200000000 |         rmmovl %edi,(%edx)      # *edx(*dest) = val
  0x091: 6062         |         addl   %esi,%edx        # edx+4(dest++)
  0x093: 6370         |         xorl   %edi,%eax        # eax(result) = eax(result) ^ edi(val)
  0x095: 30f601000000 |         irmovl $1,%esi
  0x09b: 6163         |         subl   %esi,%ebx        # ebx--(len--)
  0x09d:              | test:
  0x09d: 747d000000   |         jne    loop
                      |      	
  0x0a2:              | end:	
  0x0a2: b03f         |         popl   %ebx
  0x0a4: b06f         |         popl   %esi
  0x0a6: b07f         |         popl   %edi
  0x0a8: 2054         |         rrmovl %ebp,%esp
  0x0aa: b05f         | 	popl   %ebp
  0x0ac: 90           | 	ret
                      | /* $end copy */
                      | 
                      | # The stack starts here and grows to lower addresses
  0x100:              | 	.pos 0x100		
  0x100:              | Stack:	 
