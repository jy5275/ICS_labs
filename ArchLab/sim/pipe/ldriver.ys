#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
# 蒋衍 1600013239 出品.

#######################################################################
#           Begin of program optimization description                 #
#######################################################################
# Modify 1: 4x4 Loop Unrolling. This optimization cut the cycles to 
#   change source and destination array pointers and conditional jump 
#   in each loop. 
# Modify 2: Utilize IIADDQ and ILEAVE to avoid verbose instructions.
# Modify 3: In each loop, store instruction should begin to be executed
#   only after load is completed, which causes data dependency and 
#   wastes much time. So execute two load successively helps to improve 
#   performance.
#######################################################################
#            End of program optimization description                  #
#######################################################################





# 不好意思partB忘了写注释了 (T_T) 以下是原本应该在seq-full.hcl的注释...

#######################################################################
#           Begin of my description in seq-full.hcl                   #
#######################################################################
# For IIADDL instruction in seq-full.hcl:
#  Fetch:     icode:ifun <- M[PC]
#             rA:rB <- M[PC+1]
#             valC <- M[PC+2]
#             valP <- PC + 6
#  Decode:    valB <- rB
#  Execute:   valE <- valB + valC
#  Memory:  
#  WriteBack: R[rB] <- valE
#  Update:    PC <- valP
#######################################################################
# For ILEAVE instruction in seq-full.hcl:
#  Fetch:     icode:ifum <- M[PC]
#             valP <- PC + 1
#  Decode:    valA <- R[%ebp]
#             valB <- R[%ebp]
#  Execute:   valE <- valB + 4
#  Memory:    valM <- M[valA]
#  WriteBack: R[%ebp] <- valM
#             R[%esp] <- valE
#  Update:    PC <- valP
#######################################################################
#            End of my description in seq-full.hcl                    #
#######################################################################








##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion   # src in %ebx, len in %edx, dst in %ecx
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $0xfffffffc, %edx # len -= 4
	jl Tail1	        # goto Tail1 only if (len < 0)
	
First:	mrmovl (%ebx), %esi	# 1st load
	mrmovl 4(%ebx), %edi    # 2nd load
	rmmovl %esi, (%ecx)	# 1st save
	rmmovl %edi, 4(%ecx)    # 2nd save
	andl %esi, %esi		# val <= 0?
	jle Second		# if so, goto Npos:
	iaddl $1, %eax          # cnt ++
Second: andl %edi, %edi
        jle Third
        iaddl $1, %eax
Third:  mrmovl 8(%ebx), %esi    # 3rd load
        mrmovl 12(%ebx), %edi   # 4th load
        rmmovl %esi, 8(%ecx)    # 3rd save
        rmmovl %edi, 12(%ecx)   # 4th save
        andl %esi, %esi
        jle Forth
        iaddl $1, %eax
Forth:  andl %edi, %edi
        jle Npos
        iaddl $1, %eax

Npos:	iaddl $16, %ebx		# src += 16
	iaddl $16, %ecx		# dst += 16
	iaddl $0xfffffffc, %edx # len -= 9
	jge First		# goto Tail1 only if (len < 0)
	
Tail1:  iaddl $4, %edx
	jle Don                 # exit if len <= 0
	mrmovl (%ebx), %esi	# read val from src...
	mrmovl 4(%ebx), %edi
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Test2 		# 
	iaddl $1, %eax          # cnt ++
Test2:  iaddl $0xffffffff, %edx # len--
	jle Don
        mrmovl 8(%ebx), %esi
        rmmovl %edi, 4(%ecx)
        andl %edi, %edi
        jle Test3
        iaddl $1, %eax
Test3:  iaddl $0xffffffff, %edx # len--
	jle Don
        rmmovl %esi, 8(%ecx)
        andl %esi, %esi
        jle Don
        iaddl $1, %eax
        
Don:    popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	leave
	ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 0
	.long 2
	.long -3
	.long 4
	.long 5
	.long -6
	.long 0
	.long 8
	.long -9
	.long -10
	.long 11
	.long 12
	.long 0
	.long 14
	.long 15
	.long 16
	.long -17
	.long -18
	.long 19
	.long 20
	.long -21
	.long -22
	.long -23
	.long 24
	.long 0
	.long 26
	.long 27
	.long 28
	.long -29
	.long 30
	.long 31
	.long 32
	.long 33
	.long -34
	.long -35
	.long -36
	.long -37
	.long 38
	.long -39
	.long 40
	.long 41
	.long 42
	.long -43
	.long -44
	.long 45
	.long -46
	.long 47
	.long 48
	.long -49
	.long 50
	.long -51
	.long -52
	.long -53
	.long -54
	.long 55
	.long 56
	.long 57
	.long -58
	.long -59
	.long -60
	.long -61
	.long 62
	.long -63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
